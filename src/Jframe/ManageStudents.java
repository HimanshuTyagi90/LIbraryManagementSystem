package Jframe;

import Adapters.dbhandler;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Date;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author HIMANSHU TYAGI BCA SEM 5 ROLL NO 200954106032.
 */
public class ManageStudents extends javax.swing.JFrame {

    private String studentId, studentName, fatherName, address, phoneNo, course, rollNumber, courseTerm, currentYear,
            runningSem, studentStatus, booksIssuedTillNow;
    private Date dateOfBirth;
    private ResultSet rst;
    private static Connection conn;
    private PreparedStatement pst;
    private String sql, bookId;

    public ManageStudents() {
        try {
            conn = dbhandler.getDbConnection();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getClassLoader().getResource("resources/SCZ.png")));
        setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);
        setStudentDetailTable();

    }

    public void showmessage(String message) {

        resultNoteLabel.setText(message);
        Timer timer = new Timer(3000, (ActionEvent arg0) -> {
            resultNoteLabel.setText(" ");
        });
        timer.setRepeats(false); // Only execute once
        timer.start();

    }

// setting data into table from database
    private void setStudentDetailTable() {

        clearTable();
        try {

            sql = "Select * from `students`;";
            pst = conn.prepareStatement(sql);
            rst = pst.executeQuery();
            while (rst.next()) {
                studentId = rst.getString("studentId");
                studentName = rst.getString("studentName");
                fatherName = rst.getString("fatherName");
                course = rst.getString("course");
                phoneNo = rst.getString("phoneNo");
                address = rst.getString("address");

                Object[] obj = {studentId, studentName, fatherName, course, phoneNo, address};
                DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
                model.addRow(obj);

            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

    }

    private void clearTable() {

        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        model.setRowCount(0);
    }

    private void getData() {
        studentId = studentIdEditText.getText();
        studentName = studentNameEditText.getText();
        fatherName = fatherNameEditText.getText();
        address = addressEditText.getText();
        phoneNo = phoneNumberEditText.getText();
        course = CourseEditText.getText();
        rollNumber= rollNumberEditText.getText();
        courseTerm = courseTermEditText.getText();
        currentYear = CurrentYearEditText.getText();
        dateOfBirth = birthDatePicker.getDate();
        runningSem = RunningSemesterEditText.getText();
        booksIssuedTillNow = TotalBookIssuedTillNowEditText.getText();
        studentStatus = statusEditText.getText();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftPanel = new javax.swing.JPanel();
        HomeBtn = new javax.swing.JLabel();
        accessionNoIcon = new rojerusan.RSLabelImage();
        studentIdEditText = new app.bolivia.swing.JCTextField();
        studentNameEditText = new app.bolivia.swing.JCTextField();
        bookNameIcon = new rojerusan.RSLabelImage();
        fatherNameEditText = new app.bolivia.swing.JCTextField();
        authorNameIcon = new rojerusan.RSLabelImage();
        addressEditText = new app.bolivia.swing.JCTextField();
        publisherNameIcon = new rojerusan.RSLabelImage();
        phoneNumberEditText = new app.bolivia.swing.JCTextField();
        supplierNameIcon = new rojerusan.RSLabelImage();
        CourseEditText = new app.bolivia.swing.JCTextField();
        costIcon = new rojerusan.RSLabelImage();
        RunningSemesterEditText = new app.bolivia.swing.JCTextField();
        usernameicon12 = new rojerusan.RSLabelImage();
        ResetFieldsBtn = new javax.swing.JButton();
        DeleteBookBtn = new javax.swing.JButton();
        AddBookBtn = new javax.swing.JButton();
        UpdateBookBtn = new javax.swing.JButton();
        miscleanousIcon = new javax.swing.JLabel();
        resultNoteLabel = new javax.swing.JLabel();
        TotalBookIssuedTillNowEditText = new app.bolivia.swing.JCTextField();
        courseTermEditText = new app.bolivia.swing.JCTextField();
        CurrentYearEditText = new app.bolivia.swing.JCTextField();
        rollNumberEditText = new app.bolivia.swing.JCTextField();
        billNumberIcon = new rojerusan.RSLabelImage();
        statusEditText = new app.bolivia.swing.JCTextField();
        remarkIcon = new rojerusan.RSLabelImage();
        birthDatePicker = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        rightPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new rojeru_san.complementos.RSTableMetro();
        ManageBookLabel = new javax.swing.JLabel();
        studentStatusLabel = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Manage Students");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        leftPanel.setBackground(new java.awt.Color(0, 0, 255));
        leftPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        HomeBtn.setBackground(new java.awt.Color(255, 0, 51));
        HomeBtn.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        HomeBtn.setForeground(new java.awt.Color(255, 255, 255));
        HomeBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HomeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adminIcons/icons8_Home_26px_2.png"))); // NOI18N
        HomeBtn.setText("Home");
        HomeBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        HomeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HomeBtnMouseClicked(evt);
            }
        });
        leftPanel.add(HomeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 137, 33));

        accessionNoIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AddNewBookIcons/icons8_Contact_26px.png"))); // NOI18N
        leftPanel.add(accessionNoIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 40, 40));

        studentIdEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        studentIdEditText.setPlaceholder("Enter Student Id here");
        studentIdEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentIdEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(studentIdEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, 300, 40));

        studentNameEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        studentNameEditText.setPlaceholder("Enter Student Name here");
        studentNameEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentNameEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(studentNameEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 300, 40));

        bookNameIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AddNewBookIcons/icons8_Moleskine_26px.png"))); // NOI18N
        leftPanel.add(bookNameIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 40, 40));

        fatherNameEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        fatherNameEditText.setPlaceholder("Enter Father Name here");
        fatherNameEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fatherNameEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(fatherNameEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 190, 300, 40));

        authorNameIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AddNewBookIcons/icons8_Collaborator_Male_26px.png"))); // NOI18N
        leftPanel.add(authorNameIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 40, 40));

        addressEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        addressEditText.setPlaceholder("Enter Address here");
        addressEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(addressEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 240, 300, 40));

        publisherNameIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AddNewBookIcons/icons8_Unit_26px.png"))); // NOI18N
        leftPanel.add(publisherNameIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 40, 40));

        phoneNumberEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        phoneNumberEditText.setPlaceholder("Enter Phone Number here");
        phoneNumberEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneNumberEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(phoneNumberEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 590, 300, 40));

        supplierNameIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_Secured_Letter_50px.png"))); // NOI18N
        leftPanel.add(supplierNameIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 590, 40, 40));

        CourseEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        CourseEditText.setPlaceholder("Enter Course Here");
        CourseEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CourseEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(CourseEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 340, 300, 40));

        costIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adminIcons/icons8_Library_32px.png"))); // NOI18N
        leftPanel.add(costIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 40, 40));

        RunningSemesterEditText.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        RunningSemesterEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        RunningSemesterEditText.setPlaceholder("Running Sem");
        RunningSemesterEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunningSemesterEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(RunningSemesterEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 540, 90, 40));

        usernameicon12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adminIcons/male_user_50px.png"))); // NOI18N
        leftPanel.add(usernameicon12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, 40, 40));

        ResetFieldsBtn.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        ResetFieldsBtn.setText("RESET");
        ResetFieldsBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ResetFieldsBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ResetFieldsBtnMouseClicked(evt);
            }
        });
        ResetFieldsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetFieldsBtnActionPerformed(evt);
            }
        });
        leftPanel.add(ResetFieldsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 640, -1, -1));

        DeleteBookBtn.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        DeleteBookBtn.setText("DELETE");
        DeleteBookBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        DeleteBookBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeleteBookBtnMouseClicked(evt);
            }
        });
        DeleteBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBookBtnActionPerformed(evt);
            }
        });
        leftPanel.add(DeleteBookBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 640, -1, -1));

        AddBookBtn.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        AddBookBtn.setText("ADD");
        AddBookBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AddBookBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddBookBtnMouseClicked(evt);
            }
        });
        AddBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBookBtnActionPerformed(evt);
            }
        });
        leftPanel.add(AddBookBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 640, -1, -1));

        UpdateBookBtn.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        UpdateBookBtn.setText("UPDATE");
        UpdateBookBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        UpdateBookBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UpdateBookBtnMouseClicked(evt);
            }
        });
        UpdateBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBookBtnActionPerformed(evt);
            }
        });
        leftPanel.add(UpdateBookBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 640, -1, -1));

        miscleanousIcon.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        miscleanousIcon.setForeground(new java.awt.Color(255, 255, 255));
        miscleanousIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AddNewBookIcons/icons8_Contact_26px.png"))); // NOI18N
        leftPanel.add(miscleanousIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 540, 40, 50));

        resultNoteLabel.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        resultNoteLabel.setForeground(new java.awt.Color(255, 255, 255));
        resultNoteLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        leftPanel.add(resultNoteLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 370, 30));

        TotalBookIssuedTillNowEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        TotalBookIssuedTillNowEditText.setPlaceholder("Total Number of books issued Till Now");
        TotalBookIssuedTillNowEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TotalBookIssuedTillNowEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(TotalBookIssuedTillNowEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 440, 300, 40));

        courseTermEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        courseTermEditText.setPlaceholder("Course Term");
        courseTermEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseTermEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(courseTermEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 540, 100, 40));

        CurrentYearEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        CurrentYearEditText.setPlaceholder("Current year");
        CurrentYearEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurrentYearEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(CurrentYearEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 540, 90, 40));

        rollNumberEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        rollNumberEditText.setPlaceholder("Enter Roll Number Here");
        rollNumberEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollNumberEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(rollNumberEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 390, 300, 40));

        billNumberIcon.setBackground(new java.awt.Color(255, 255, 255));
        billNumberIcon.setForeground(new java.awt.Color(255, 255, 255));
        billNumberIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adminIcons/icons8_menu_48px_1.png"))); // NOI18N
        leftPanel.add(billNumberIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 40, 40));

        statusEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        statusEditText.setPlaceholder("Student Status (ACTIVE/FINAL/DEFAULTER)");
        statusEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(statusEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 490, 300, 40));

        remarkIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_Account_50px.png"))); // NOI18N
        leftPanel.add(remarkIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 40, 40));

        birthDatePicker.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                birthDatePickerFocusGained(evt);
            }
        });
        leftPanel.add(birthDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 310, 300, -1));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Date of Birth");
        leftPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 290, 150, -1));

        getContentPane().add(leftPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 430, 710));

        rightPanel.setBackground(new java.awt.Color(102, 102, 255));
        rightPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dataTable.setForeground(new java.awt.Color(102, 102, 255));
        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Stud. Id.", " Name", "Father's Name", "Course", "Phone No.", "Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dataTable.setColorBackgoundHead(new java.awt.Color(0, 0, 255));
        dataTable.setColorFilasForeground1(new java.awt.Color(0, 0, 0));
        dataTable.setColorFilasForeground2(new java.awt.Color(102, 102, 255));
        dataTable.setColorSelBackgound(new java.awt.Color(102, 0, 153));
        dataTable.setColumnSelectionAllowed(true);
        dataTable.setFuenteFilas(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        dataTable.setFuenteFilasSelect(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        dataTable.setMultipleSeleccion(false);
        dataTable.setRowHeight(30);
        dataTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dataTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(dataTable);
        dataTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (dataTable.getColumnModel().getColumnCount() > 0) {
            dataTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            dataTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            dataTable.getColumnModel().getColumn(2).setPreferredWidth(80);
            dataTable.getColumnModel().getColumn(3).setPreferredWidth(15);
            dataTable.getColumnModel().getColumn(5).setPreferredWidth(100);
        }

        rightPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 920, 460));

        ManageBookLabel.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        ManageBookLabel.setForeground(new java.awt.Color(255, 255, 255));
        ManageBookLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AddNewBookIcons/icons8_Student_Male_100px.png"))); // NOI18N
        ManageBookLabel.setText("Manage Students");
        ManageBookLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ManageBookLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ManageBookLabelMouseClicked(evt);
            }
        });
        rightPanel.add(ManageBookLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, 350, -1));

        studentStatusLabel.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        studentStatusLabel.setForeground(new java.awt.Color(153, 51, 255));
        studentStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rightPanel.add(studentStatusLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 170, 490, -1));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel13.setText("Recent Student:-");
        rightPanel.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 280, -1));

        getContentPane().add(rightPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 0, 940, 710));

        setSize(new java.awt.Dimension(1394, 713));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void HomeBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HomeBtnMouseClicked

        ControlPanel next = new ControlPanel();
        next.setVisible(true);
        dispose();
    }//GEN-LAST:event_HomeBtnMouseClicked

    private void studentIdEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentIdEditTextActionPerformed
          if (String.valueOf(studentIdEditText.getText()).isEmpty()) {
            showmessage("Student's Id shouldn't be Empty!");
            studentIdEditText.requestFocus();
        } else {
            studentId = studentIdEditText.getText().toUpperCase();
            try {

                sql = "Select * from `students` where `studentId` Like '" + studentId + "';";
                pst = conn.prepareStatement(sql);
                rst = pst.executeQuery();
                if (rst.next()) {
                    showmessage("Student with same Student ID. Already Exists...");
                    studentIdEditText.setText("");
                    studentIdEditText.requestFocus();
                } else {
                    studentNameEditText.requestFocus();
                }
            } catch (SQLException ex) {
            }

        }
        
    }//GEN-LAST:event_studentIdEditTextActionPerformed

    private void studentNameEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentNameEditTextActionPerformed
       studentName = studentNameEditText.getText().toUpperCase();
        if (studentName.isEmpty()) {
            showmessage("Student's Name shouldn't be Empty!");
        } else {

            Pattern namePattern = Pattern.compile("^[a-zA-Z ]{4,16}$");
            Matcher nameMatcher = namePattern.matcher(studentName);
            if (!nameMatcher.matches()) {

                showmessage("Student's Name should not cotain any number! ");
                studentNameEditText.requestFocus();

                studentNameEditText.setBackground(Color.red);
                studentNameEditText.setForeground(Color.white);
                studentNameEditText.setText("");
                studentNameEditText.requestFocus();

            } else {
                studentNameEditText.setBackground(Color.WHITE);
                studentNameEditText.setForeground(Color.BLACK);
                 fatherNameEditText.requestFocus();
            }

        }
       
    }//GEN-LAST:event_studentNameEditTextActionPerformed

    private void fatherNameEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fatherNameEditTextActionPerformed
        fatherName = fatherNameEditText.getText().toUpperCase();
        if (fatherName.isEmpty()) {
            showmessage("Father's Name shouldn't be Empty!");
        } else {

            Pattern namePattern = Pattern.compile("^[a-zA-Z ]{4,16}$");
            Matcher nameMatcher = namePattern.matcher(fatherName);
            if (!nameMatcher.matches()) {

                showmessage("Father's Name can't cotain any number! ");
                fatherNameEditText.requestFocus();

                fatherNameEditText.setBackground(Color.red);
                fatherNameEditText.setForeground(Color.white);
                fatherNameEditText.setText("");
                fatherNameEditText.requestFocus();

            } else {
                fatherNameEditText.setBackground(Color.WHITE);
                fatherNameEditText.setForeground(Color.BLACK);
                addressEditText.requestFocus();
            }

        }
        
    }//GEN-LAST:event_fatherNameEditTextActionPerformed

    private void addressEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressEditTextActionPerformed
         address = addressEditText.getText();
        if (address.isEmpty()) {
            showmessage("Address shouldn't be Empty!");
        } else {

            Pattern namePattern = Pattern.compile("^[a-zA-Z0-9 ]{4,16}$");
            Matcher nameMatcher = namePattern.matcher(address);
            if (!nameMatcher.matches()) {

                showmessage("Address can cotain only letters and numbers! ");
                addressEditText.requestFocus();

                addressEditText.setBackground(Color.red);
                addressEditText.setForeground(Color.white);
                addressEditText.setText("");
                addressEditText.requestFocus();

            } else {
                addressEditText.setBackground(Color.WHITE);
                addressEditText.setForeground(Color.BLACK);
                birthDatePicker.requestFocus();
            }

        }
       
    }//GEN-LAST:event_addressEditTextActionPerformed

    private void phoneNumberEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneNumberEditTextActionPerformed
        phoneNo = phoneNumberEditText.getText();
        if (phoneNo.isEmpty()) {
            showmessage("Phone Number shouldn't be Empty!");
        } else {

            Pattern p = Pattern.compile("^\\d+$");
            Matcher m = p.matcher(phoneNo);
            if (!m.matches()) {

                showmessage("Phone Numbercan only be Numbers.");
                phoneNumberEditText.requestFocus();

                phoneNumberEditText.setBackground(Color.red);
                phoneNumberEditText.setForeground(Color.white);
                phoneNumberEditText.setText("");
                phoneNumberEditText.requestFocus();
            } else {
                if(phoneNo.length()<10){
                    
                    showmessage("Phone number can't be less then 10 No.s");
                    
                }else{
                
                phoneNumberEditText.setBackground(Color.white);
                phoneNumberEditText.setForeground(Color.BLACK);
                phoneNumberEditText.requestFocus();
                }
            }
        }
        
    }//GEN-LAST:event_phoneNumberEditTextActionPerformed

    private void CourseEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CourseEditTextActionPerformed
        
        course = CourseEditText.getText().toUpperCase();
        if (course.isEmpty()) {
            showmessage("Course shouldn't be Empty!");
        } else {

            Pattern namePattern = Pattern.compile("^[a-zA-Z. ]{4,16}$");
            Matcher nameMatcher = namePattern.matcher(course);
            if (!nameMatcher.matches()) {

                showmessage("Course can't cotain any number! ");
                CourseEditText.requestFocus();

                CourseEditText.setBackground(Color.red);
                CourseEditText.setForeground(Color.white);
                CourseEditText.setText("");
                CourseEditText.requestFocus();

            } else {
                CourseEditText.setBackground(Color.WHITE);
                CourseEditText.setForeground(Color.BLACK);
                rollNumberEditText.requestFocus();
            }

        }
        
    }//GEN-LAST:event_CourseEditTextActionPerformed

    private void RunningSemesterEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunningSemesterEditTextActionPerformed
         runningSem = RunningSemesterEditText.getText();
        if (runningSem.isEmpty()) {
            showmessage("Running Sem shouldn't be Empty!");
        } else {

            Pattern p = Pattern.compile("^\\d+$");
            Matcher m = p.matcher(runningSem);
            if (!m.matches()) {

                showmessage("Running Sem can only be Numbers.");
                RunningSemesterEditText.requestFocus();

                RunningSemesterEditText.setBackground(Color.red);
                RunningSemesterEditText.setForeground(Color.white);
                RunningSemesterEditText.setText("");
                RunningSemesterEditText.requestFocus();
            } else {
                
                RunningSemesterEditText.setBackground(Color.white);
                RunningSemesterEditText.setForeground(Color.BLACK);
               phoneNumberEditText.requestFocus();
            }
        }
        
    }//GEN-LAST:event_RunningSemesterEditTextActionPerformed

    private void ResetFieldsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetFieldsBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ResetFieldsBtnActionPerformed

    private void DeleteBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBookBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DeleteBookBtnActionPerformed

    private void AddBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBookBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddBookBtnActionPerformed

    private void UpdateBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBookBtnActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_UpdateBookBtnActionPerformed

    private void AddBookBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddBookBtnMouseClicked
        
        getData();
        try {

                sql = "Select * from `students` where `studentId` Like '" + studentId + "';";
                pst = conn.prepareStatement(sql);
                rst = pst.executeQuery();
                if (rst.next()) {
                    showmessage("Student with same StudentId Already Exists...");
                } else {
                    sql = "INSERT INTO `students` (`studentId`, `studentName`, `fatherName`, `address`, `phoneNo`,  `course`, `rollNumber`, `studentStatus`, `booksIssued`, `courseTerm`, `currentYear`, `runningSem`, `dateOfBirth`) "
                            + " values(?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    pst = conn.prepareStatement(sql);
                    pst.setString(1, studentId);
                    pst.setString(2, studentName);
                    pst.setString(3, fatherName);
                    pst.setString(4, address);
                    pst.setString(5, phoneNo);
                    pst.setString(6, course);
                    pst.setString(7, rollNumber);
                    if (Integer.parseInt(booksIssuedTillNow) == 0) {   // this is null here.
                        studentStatus = "FINAL";
                    } else if (Integer.parseInt(booksIssuedTillNow) > 0) {
                        studentStatus = "ACTIVE";
                    }
                    pst.setString(8, studentStatus);
                    pst.setString(9, booksIssuedTillNow);
                    pst.setString(10, courseTerm);
                    pst.setString(11, currentYear);
                    pst.setString(12, runningSem);
                    dateOfBirth = birthDatePicker.getDate();
                    java.sql.Date sqlDate = new java.sql.Date(dateOfBirth.getTime());
                    pst.setDate(13, sqlDate);/// HERE IS THE ERROR.

                    int updateRowCount = pst.executeUpdate();
                    if (updateRowCount > 0) {
                        // sending user to control panel
                        showmessage("Student data inserted sucessfully!");
                    } else {

                        showmessage("Oops! insertion Failure");
                    }
                } // upper else block
                setStudentDetailTable();

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
       


    }//GEN-LAST:event_AddBookBtnMouseClicked

    private void ManageBookLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ManageBookLabelMouseClicked

        setStudentDetailTable();
    }//GEN-LAST:event_ManageBookLabelMouseClicked

    private void TotalBookIssuedTillNowEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TotalBookIssuedTillNowEditTextActionPerformed
         booksIssuedTillNow = TotalBookIssuedTillNowEditText.getText();
        if (booksIssuedTillNow.isEmpty()) {
            showmessage("Roll Number shouldn't be Empty!");
        } else {

            Pattern p = Pattern.compile("^\\d+$");
            Matcher m = p.matcher(booksIssuedTillNow);
            if (!m.matches()) {

                showmessage("Roll Number can only be Numbers.");
                TotalBookIssuedTillNowEditText.requestFocus();

                TotalBookIssuedTillNowEditText.setBackground(Color.red);
                TotalBookIssuedTillNowEditText.setForeground(Color.white);
                TotalBookIssuedTillNowEditText.setText("");
                TotalBookIssuedTillNowEditText.requestFocus();
            } else {
                int noOfBook = Integer.parseInt(booksIssuedTillNow);
                if (noOfBook< 0 ) {
                    showmessage("No of Books issued can't be less then 0 ");
                    TotalBookIssuedTillNowEditText.requestFocus();
                } else {
                TotalBookIssuedTillNowEditText.setBackground(Color.white);
                TotalBookIssuedTillNowEditText.setForeground(Color.BLACK);
                 statusEditText.requestFocus();
                }
            }
        }
        
       
    }//GEN-LAST:event_TotalBookIssuedTillNowEditTextActionPerformed

    private void courseTermEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseTermEditTextActionPerformed
            courseTerm = courseTermEditText.getText();
        if (courseTerm.isEmpty()) {
            showmessage("Course term shouldn't be Empty!");
        } else {

            Pattern p = Pattern.compile("^\\d+$");
            Matcher m = p.matcher(courseTerm);
            if (!m.matches()) {

                showmessage("Course term can only be Numbers.");
                courseTermEditText.requestFocus();

                courseTermEditText.setBackground(Color.red);
                courseTermEditText.setForeground(Color.white);
                courseTermEditText.setText("");
                courseTermEditText.requestFocus();
            } else {
                
                courseTermEditText.setBackground(Color.white);
                courseTermEditText.setForeground(Color.BLACK);
                CurrentYearEditText.requestFocus();
            }
        }
        
    }//GEN-LAST:event_courseTermEditTextActionPerformed

    private void CurrentYearEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CurrentYearEditTextActionPerformed
        currentYear = CurrentYearEditText.getText();
        if (currentYear.isEmpty()) {
            showmessage("Current year shouldn't be Empty!");
        } else {

            Pattern p = Pattern.compile("^\\d+$");
            Matcher m = p.matcher(currentYear);
            if (!m.matches()) {

                showmessage("Current year only be Numbers.");
                CurrentYearEditText.requestFocus();

                CurrentYearEditText.setBackground(Color.red);
                CurrentYearEditText.setForeground(Color.white);
                CurrentYearEditText.setText("");
                CurrentYearEditText.requestFocus();
            } else {
                
                CurrentYearEditText.setBackground(Color.white);
                CurrentYearEditText.setForeground(Color.BLACK);
                 RunningSemesterEditText.requestFocus();
            }
        }
       
    }//GEN-LAST:event_CurrentYearEditTextActionPerformed

    private void rollNumberEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollNumberEditTextActionPerformed
         rollNumber = rollNumberEditText.getText();
        if (rollNumber.isEmpty()) {
            showmessage("Roll Number shouldn't be Empty!");
        } else {

            Pattern p = Pattern.compile("^\\d+$");
            Matcher m = p.matcher(rollNumber);
            if (!m.matches()) {

                showmessage("Roll Number can only be Numbers.");
                rollNumberEditText.requestFocus();

                rollNumberEditText.setBackground(Color.red);
                rollNumberEditText.setForeground(Color.white);
                rollNumberEditText.setText("");
                rollNumberEditText.requestFocus();
            } else {
                
                rollNumberEditText.setBackground(Color.white);
                rollNumberEditText.setForeground(Color.BLACK);
                TotalBookIssuedTillNowEditText.requestFocus();
            }
        }
        
    }//GEN-LAST:event_rollNumberEditTextActionPerformed

    private void statusEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusEditTextActionPerformed
        studentStatus = statusEditText.getText().toUpperCase();
        if (studentStatus.isEmpty()) {
            showmessage("Status shouldn't be Empty!");
        } else {

            Pattern namePattern = Pattern.compile("^[a-zA-Z ]{4,16}$");
            Matcher nameMatcher = namePattern.matcher(studentStatus);
            if (!nameMatcher.matches()) {

                showmessage("Status can't cotain any number! ");
                statusEditText.requestFocus();

                statusEditText.setBackground(Color.red);
                statusEditText.setForeground(Color.white);
                statusEditText.setText("");
                statusEditText.requestFocus();

            } else {
                statusEditText.setBackground(Color.WHITE);
                statusEditText.setForeground(Color.BLACK);
                 courseTermEditText.requestFocus();
            }

        }
       
    }//GEN-LAST:event_statusEditTextActionPerformed

    private void UpdateBookBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdateBookBtnMouseClicked

       

            try {
                getData();
                sql = "UPDATE  `students`  set studentName = ?, fatherName = ?, address =?, phoneNo =?, course = ?, rollNumber = ?,studentStatus = ?, booksIssued = ?, courseTerm = ?, currentYear = ?,"
                        + " runningSem =?,  dateOfBirth = ?  where studentId = ? ";
                pst = conn.prepareStatement(sql);

                pst.setString(1, studentName);
                pst.setString(2, fatherName);
                pst.setString(3, address);
                pst.setString(4, phoneNo);
                pst.setString(5, course);
                pst.setString(6, rollNumber);
                if (Integer.parseInt(booksIssuedTillNow) == 0) {
                    studentStatus = "FINAL";
                } else if (Integer.parseInt(booksIssuedTillNow) > 0) {
                    studentStatus = "ACTIVE";
                }
                pst.setString(7, studentStatus);
                pst.setString(8, booksIssuedTillNow);
                pst.setString(9, courseTerm);
                pst.setString(10, currentYear);
                pst.setString(11, runningSem);
                java.sql.Date sqlDate = new java.sql.Date(dateOfBirth.getTime());
                pst.setDate(12, sqlDate);
                pst.setString(13, studentId);
                int updateRowCount = pst.executeUpdate();
                if (updateRowCount > 0) {
                    // sending user to control panel
                    showmessage("Student Updated sucessfully!");
                } else {

                    showmessage("Once Created , Student's id can't be updated");
                }
                // upper else block
                setStudentDetailTable();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
       

    }//GEN-LAST:event_UpdateBookBtnMouseClicked

    private void ResetFieldsBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResetFieldsBtnMouseClicked

        studentIdEditText.setText("");
        studentNameEditText.setText("");
        fatherNameEditText.setText("");
        addressEditText.setText("");
        phoneNumberEditText.setText("");
        CourseEditText.setText("");
        rollNumberEditText.setText("");
        statusEditText.setText("");
        TotalBookIssuedTillNowEditText.setText("");
        courseTermEditText.setText("");
        CurrentYearEditText.setText("");
        RunningSemesterEditText.setText("");

    }//GEN-LAST:event_ResetFieldsBtnMouseClicked

    private void DeleteBookBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteBookBtnMouseClicked

        try {

            studentId = studentIdEditText.getText();
//          checking if student has any book issued or not , if issued student should not be deleted.
            sql = "select * from `books` where issuedToStudId Like '" + studentId + "';";
            pst = conn.prepareStatement(sql);
            rst = pst.executeQuery();
            if (rst.next()) {
                bookId = rst.getString("bookId");
                resultNoteLabel.setText("Book with Id " + bookId + " is Issued to this Student");
            } else {
                
                 /* JOptionPane user input  */
                    studentName = studentNameEditText.getText().toUpperCase();
                var yesOrNo = JOptionPane.showConfirmDialog(ManageStudents.this, "Sure! Want to Delete Student ? "+studentName);
                if (yesOrNo == 0) {
                    
                sql = "Delete  from `students` where studentId Like '" + studentId + "';";
                pst = conn.prepareStatement(sql);
                int updateRowCount = pst.executeUpdate();
                if (updateRowCount > 0) {
                    showmessage("Student Deleted from DATABASE");
                } else {

                    showmessage("ERROR! in Deleting ");
                }
                setStudentDetailTable();
                }
//                if (yesOrNo == 1) { 
//                  System.out.println(yesOrNo);
//                }
//                if (yesOrNo == 2) { 
//                  System.out.println(yesOrNo);
//                }
            }
        } catch (SQLException ex) {

            ex.printStackTrace();
        }


    }//GEN-LAST:event_DeleteBookBtnMouseClicked

    private void dataTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataTableMouseClicked

        int rowNo = dataTable.getSelectedRow();
        TableModel model = dataTable.getModel();

        studentIdEditText.setText(model.getValueAt(rowNo, 0).toString());
        studentNameEditText.setText(model.getValueAt(rowNo, 1).toString());
        fatherNameEditText.setText(model.getValueAt(rowNo, 2).toString());
        CourseEditText.setText(model.getValueAt(rowNo, 3).toString());
        phoneNumberEditText.setText(model.getValueAt(rowNo, 4).toString());
        addressEditText.setText(model.getValueAt(rowNo, 5).toString());

        try {
            rst = pst.executeQuery("SELECT * FROM `students` where studentId = '" + model.getValueAt(rowNo, 0).toString() + "';");
            rst.next();
            rollNumber = rst.getString("rollNumber");
            studentStatus = rst.getString("studentStatus");
            booksIssuedTillNow = rst.getString("booksIssued");
            courseTerm = rst.getString("courseTerm");
            runningSem = rst.getString("runningSem");
            currentYear = rst.getString("currentYear");
            dateOfBirth = rst.getDate("dateOfBirth");

            if (studentStatus.equalsIgnoreCase("final")) {
                studentStatusLabel.setText(studentStatus);
                studentStatusLabel.setForeground(Color.GREEN);
            }

            if (studentStatus.equalsIgnoreCase("Active")) {
                studentStatusLabel.setText(studentStatus);
                studentStatusLabel.setForeground(Color.CYAN);
            }

            if (studentStatus.equalsIgnoreCase("Defaulter")) {
                studentStatusLabel.setText(studentStatus);
                studentStatusLabel.setForeground(Color.RED);
            }

        } catch (SQLException ex) {
            Logger.getLogger(ManageStudents.class.getName()).log(Level.SEVERE, null, ex);
        }

        CourseEditText.setText(course);
        rollNumberEditText.setText(rollNumber);
        statusEditText.setText(studentStatus);
        TotalBookIssuedTillNowEditText.setText(booksIssuedTillNow);
        courseTermEditText.setText(courseTerm);
        CurrentYearEditText.setText(currentYear);
        RunningSemesterEditText.setText(runningSem);
        birthDatePicker.setDate(dateOfBirth);
    }//GEN-LAST:event_dataTableMouseClicked

    private void birthDatePickerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_birthDatePickerFocusGained
        // TODO add your handling code here:
        showmessage("SELECT DATE OF BIRTH.");
    }//GEN-LAST:event_birthDatePickerFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ManageStudents().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBookBtn;
    private app.bolivia.swing.JCTextField CourseEditText;
    private app.bolivia.swing.JCTextField CurrentYearEditText;
    private javax.swing.JButton DeleteBookBtn;
    private javax.swing.JLabel HomeBtn;
    private javax.swing.JLabel ManageBookLabel;
    private javax.swing.JButton ResetFieldsBtn;
    private app.bolivia.swing.JCTextField RunningSemesterEditText;
    private app.bolivia.swing.JCTextField TotalBookIssuedTillNowEditText;
    private javax.swing.JButton UpdateBookBtn;
    private rojerusan.RSLabelImage accessionNoIcon;
    private app.bolivia.swing.JCTextField addressEditText;
    private rojerusan.RSLabelImage authorNameIcon;
    private rojerusan.RSLabelImage billNumberIcon;
    private com.toedter.calendar.JDateChooser birthDatePicker;
    private rojerusan.RSLabelImage bookNameIcon;
    private rojerusan.RSLabelImage costIcon;
    private app.bolivia.swing.JCTextField courseTermEditText;
    private rojeru_san.complementos.RSTableMetro dataTable;
    private app.bolivia.swing.JCTextField fatherNameEditText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JLabel miscleanousIcon;
    private app.bolivia.swing.JCTextField phoneNumberEditText;
    private rojerusan.RSLabelImage publisherNameIcon;
    private rojerusan.RSLabelImage remarkIcon;
    private javax.swing.JLabel resultNoteLabel;
    private javax.swing.JPanel rightPanel;
    private app.bolivia.swing.JCTextField rollNumberEditText;
    private app.bolivia.swing.JCTextField statusEditText;
    private app.bolivia.swing.JCTextField studentIdEditText;
    private app.bolivia.swing.JCTextField studentNameEditText;
    private javax.swing.JLabel studentStatusLabel;
    private rojerusan.RSLabelImage supplierNameIcon;
    private rojerusan.RSLabelImage usernameicon12;
    // End of variables declaration//GEN-END:variables
}
