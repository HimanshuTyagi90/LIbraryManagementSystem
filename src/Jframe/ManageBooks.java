package Jframe;

import Adapters.dbhandler;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Date;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author HIMANSHU TYAGI BCA SEM 5 ROLL NO 200954106032.
 */
public class ManageBooks extends javax.swing.JFrame {

    String bookId, bookName, author, publisher, supplier, billNo, remark, subjectOfBook, edition, sql, isIssued;
    Integer publishYear, pages;
    Date dateOfSupply;
    Double cost = 0.00;
    private ResultSet rst;
    private static Connection conn;
    private PreparedStatement pst;

    public ManageBooks() {
        try {
            conn = dbhandler.getDbConnection();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getClassLoader().getResource("resources/SCZ.png")));
        setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);
        setBookDetailTable();
    }
    
    void println(String text){
        
        System.out.println(text);
    }

    public void showmessage(String message) {

        resultNoteLabel.setText(message);
        Timer timer = new Timer(3000, (ActionEvent arg0) -> {
            resultNoteLabel.setText(" ");
        });
        timer.setRepeats(false); // Only execute once
        timer.start();

    }

// setting data into table from database
    private void setBookDetailTable() {

        clearTable();
        try {

            sql = "Select * from `books`;";
            pst = conn.prepareStatement(sql);
            rst = pst.executeQuery();
            while (rst.next()) {
                bookId = rst.getString("bookId");
                bookName = rst.getString("bookName");
                author = rst.getString("authorName");
                publisher = rst.getString("publisherName");
                supplier = rst.getString("supplierName");
                subjectOfBook = rst.getString("subjectOfBook");

                Object[] obj = {bookId, bookName, author, publisher, supplier, subjectOfBook};
                DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
                model.addRow(obj);

            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

    }

    private void clearTable() {

        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        model.setRowCount(0);
    }

    private void getData() {
        bookId = bookIdEditText.getText();
        bookName = bookNameEditText.getText();
        author = authorNameEditText.getText();
        publisher = publisherNameEditText.getText();
        supplier = supplierNameEditText.getText();
        billNo = BillNumberEditText.getText();
        remark = RemarkEditText.getText();
        subjectOfBook = subjectOfBookEditText.getText();
        edition = bookEditionEditText.getText();
        dateOfSupply = supplyDatePicker.getDate();
        publishYear = Integer.valueOf(publishYearEditText.getText());
        pages = Integer.valueOf(NoOfPagesEditText.getText());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftPanel = new javax.swing.JPanel();
        HomeBtn = new javax.swing.JLabel();
        accessionNoIcon = new rojerusan.RSLabelImage();
        bookIdEditText = new app.bolivia.swing.JCTextField();
        bookNameEditText = new app.bolivia.swing.JCTextField();
        bookNameIcon = new rojerusan.RSLabelImage();
        authorNameEditText = new app.bolivia.swing.JCTextField();
        authorNameIcon = new rojerusan.RSLabelImage();
        publisherNameEditText = new app.bolivia.swing.JCTextField();
        publisherNameIcon = new rojerusan.RSLabelImage();
        supplierNameEditText = new app.bolivia.swing.JCTextField();
        supplierNameIcon = new rojerusan.RSLabelImage();
        bookPriceEditText = new app.bolivia.swing.JCTextField();
        costIcon = new rojerusan.RSLabelImage();
        NoOfPagesEditText = new app.bolivia.swing.JCTextField();
        usernameicon12 = new rojerusan.RSLabelImage();
        ResetFieldsBtn = new javax.swing.JButton();
        DeleteBookBtn = new javax.swing.JButton();
        AddBookBtn = new javax.swing.JButton();
        UpdateBookBtn = new javax.swing.JButton();
        miscleanousIcon = new javax.swing.JLabel();
        resultNoteLabel = new javax.swing.JLabel();
        subjectOfBookEditText = new app.bolivia.swing.JCTextField();
        bookEditionEditText = new app.bolivia.swing.JCTextField();
        publishYearEditText = new app.bolivia.swing.JCTextField();
        BillNumberEditText = new app.bolivia.swing.JCTextField();
        billNumberIcon = new rojerusan.RSLabelImage();
        RemarkEditText = new app.bolivia.swing.JCTextField();
        remarkIcon = new rojerusan.RSLabelImage();
        supplyDatePicker = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        rightPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new rojeru_san.complementos.RSTableMetro();
        ManageBookLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Manage Books");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        leftPanel.setBackground(new java.awt.Color(51, 153, 0));
        leftPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        HomeBtn.setBackground(new java.awt.Color(255, 0, 51));
        HomeBtn.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        HomeBtn.setForeground(new java.awt.Color(255, 255, 255));
        HomeBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HomeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adminIcons/icons8_Home_26px_2.png"))); // NOI18N
        HomeBtn.setText("Home");
        HomeBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        HomeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HomeBtnMouseClicked(evt);
            }
        });
        leftPanel.add(HomeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 137, 33));

        accessionNoIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AddNewBookIcons/icons8_Contact_26px.png"))); // NOI18N
        leftPanel.add(accessionNoIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 40, 40));

        bookIdEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        bookIdEditText.setPlaceholder("Enter Accss. No / Book Id here");
        bookIdEditText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                bookIdEditTextFocusLost(evt);
            }
        });
        bookIdEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookIdEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(bookIdEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, 300, 40));

        bookNameEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        bookNameEditText.setPlaceholder("Enter Book Name here");
        bookNameEditText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                bookNameEditTextFocusLost(evt);
            }
        });
        bookNameEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookNameEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(bookNameEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 300, 40));

        bookNameIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AddNewBookIcons/icons8_Moleskine_26px.png"))); // NOI18N
        leftPanel.add(bookNameIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 40, 40));

        authorNameEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        authorNameEditText.setPlaceholder("Enter Author Name here");
        authorNameEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorNameEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(authorNameEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 190, 300, 40));

        authorNameIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AddNewBookIcons/icons8_Collaborator_Male_26px.png"))); // NOI18N
        leftPanel.add(authorNameIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 40, 40));

        publisherNameEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        publisherNameEditText.setPlaceholder("Enter Publisher Name here");
        publisherNameEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publisherNameEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(publisherNameEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 240, 300, 40));

        publisherNameIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AddNewBookIcons/icons8_Unit_26px.png"))); // NOI18N
        leftPanel.add(publisherNameIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 40, 40));

        supplierNameEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        supplierNameEditText.setPlaceholder("Enter Supplier Name here");
        supplierNameEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierNameEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(supplierNameEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 290, 300, 40));

        supplierNameIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_Secured_Letter_50px.png"))); // NOI18N
        leftPanel.add(supplierNameIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 40, 40));

        bookPriceEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        bookPriceEditText.setPlaceholder("Cost of Book");
        bookPriceEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookPriceEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(bookPriceEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 340, 300, 40));

        costIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adminIcons/icons8_Library_32px.png"))); // NOI18N
        leftPanel.add(costIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 40, 40));

        NoOfPagesEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        NoOfPagesEditText.setPlaceholder("No. of Pages");
        NoOfPagesEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoOfPagesEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(NoOfPagesEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 540, 90, 40));

        usernameicon12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adminIcons/male_user_50px.png"))); // NOI18N
        leftPanel.add(usernameicon12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, 40, 40));

        ResetFieldsBtn.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        ResetFieldsBtn.setText("RESET");
        ResetFieldsBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ResetFieldsBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ResetFieldsBtnMouseClicked(evt);
            }
        });
        ResetFieldsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetFieldsBtnActionPerformed(evt);
            }
        });
        leftPanel.add(ResetFieldsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 640, -1, -1));

        DeleteBookBtn.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        DeleteBookBtn.setText("DELETE");
        DeleteBookBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        DeleteBookBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeleteBookBtnMouseClicked(evt);
            }
        });
        DeleteBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBookBtnActionPerformed(evt);
            }
        });
        leftPanel.add(DeleteBookBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 640, -1, -1));

        AddBookBtn.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        AddBookBtn.setText("ADD");
        AddBookBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AddBookBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddBookBtnMouseClicked(evt);
            }
        });
        AddBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBookBtnActionPerformed(evt);
            }
        });
        leftPanel.add(AddBookBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 640, -1, -1));

        UpdateBookBtn.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        UpdateBookBtn.setText("UPDATE");
        UpdateBookBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        UpdateBookBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UpdateBookBtnMouseClicked(evt);
            }
        });
        UpdateBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBookBtnActionPerformed(evt);
            }
        });
        leftPanel.add(UpdateBookBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 640, -1, -1));

        miscleanousIcon.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        miscleanousIcon.setForeground(new java.awt.Color(255, 255, 255));
        miscleanousIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AddNewBookIcons/icons8_Contact_26px.png"))); // NOI18N
        leftPanel.add(miscleanousIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 540, 40, 50));

        resultNoteLabel.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        resultNoteLabel.setForeground(new java.awt.Color(255, 255, 255));
        resultNoteLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        leftPanel.add(resultNoteLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 410, 30));

        subjectOfBookEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        subjectOfBookEditText.setPlaceholder("Book Subject (ex.  C for Ansi C & Yashwant K.)");
        subjectOfBookEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectOfBookEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(subjectOfBookEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 490, 300, 40));

        bookEditionEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        bookEditionEditText.setPlaceholder("Edition");
        bookEditionEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookEditionEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(bookEditionEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 540, 100, 40));

        publishYearEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        publishYearEditText.setPlaceholder("Publish year");
        publishYearEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publishYearEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(publishYearEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 540, 90, 40));

        BillNumberEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        BillNumberEditText.setPlaceholder("Bill Number ");
        BillNumberEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BillNumberEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(BillNumberEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 390, 300, 40));

        billNumberIcon.setBackground(new java.awt.Color(255, 255, 255));
        billNumberIcon.setForeground(new java.awt.Color(255, 255, 255));
        billNumberIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/adminIcons/icons8_menu_48px_1.png"))); // NOI18N
        leftPanel.add(billNumberIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 40, 40));

        RemarkEditText.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        RemarkEditText.setPlaceholder("Remark on Book");
        RemarkEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemarkEditTextActionPerformed(evt);
            }
        });
        leftPanel.add(RemarkEditText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 590, 300, 40));

        remarkIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_Account_50px.png"))); // NOI18N
        leftPanel.add(remarkIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 590, 40, 40));

        supplyDatePicker.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                supplyDatePickerFocusGained(evt);
            }
        });
        supplyDatePicker.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                supplyDatePickerPropertyChange(evt);
            }
        });
        leftPanel.add(supplyDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 460, 300, -1));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Date of Supply");
        leftPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 440, 150, -1));

        getContentPane().add(leftPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 430, 710));

        rightPanel.setBackground(new java.awt.Color(0, 204, 51));
        rightPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dataTable.setForeground(new java.awt.Color(255, 51, 0));
        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Access. No", "Book Name", "Author", "Publisher", "Supplier", "Subject"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dataTable.setColorBackgoundHead(new java.awt.Color(51, 153, 0));
        dataTable.setColorFilasForeground1(new java.awt.Color(0, 0, 0));
        dataTable.setColorFilasForeground2(new java.awt.Color(51, 153, 0));
        dataTable.setColorSelBackgound(new java.awt.Color(102, 0, 153));
        dataTable.setColumnSelectionAllowed(true);
        dataTable.setFuenteFilas(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        dataTable.setFuenteFilasSelect(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        dataTable.setMultipleSeleccion(false);
        dataTable.setRowHeight(30);
        dataTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dataTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(dataTable);
        dataTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (dataTable.getColumnModel().getColumnCount() > 0) {
            dataTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            dataTable.getColumnModel().getColumn(1).setPreferredWidth(180);
        }

        rightPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 920, 450));

        ManageBookLabel.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        ManageBookLabel.setForeground(new java.awt.Color(255, 255, 255));
        ManageBookLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AddNewBookIcons/icons8_Books_52px_1.png"))); // NOI18N
        ManageBookLabel.setText("Manage Books");
        ManageBookLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ManageBookLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ManageBookLabelMouseClicked(evt);
            }
        });
        rightPanel.add(ManageBookLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, 250, -1));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel12.setText("Recently Added Books:-");
        rightPanel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 280, -1));

        getContentPane().add(rightPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 0, 940, 710));

        setSize(new java.awt.Dimension(1394, 713));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void HomeBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HomeBtnMouseClicked

        ControlPanel next = new ControlPanel();
        next.setVisible(true);
        dispose();
    }//GEN-LAST:event_HomeBtnMouseClicked

    private void bookIdEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookIdEditTextActionPerformed

        if (String.valueOf(bookIdEditText.getText()).isEmpty()) {
            showmessage("Book's Id shouldn't be Empty!");
            bookIdEditText.requestFocus();
        } else {
            bookId = bookIdEditText.getText().toUpperCase();
            try {

                sql = "Select * from `books` where `bookId` Like '" + bookId + "';";
                pst = conn.prepareStatement(sql);
                rst = pst.executeQuery();
                if (rst.next()) {
                    showmessage("Book with same Acc NO. Already Exists...");
                    bookIdEditText.setText("");
                    bookIdEditText.requestFocus();
                } else {
                    bookNameEditText.requestFocus();
                }
            } catch (SQLException ex) {
            }

        }

    }//GEN-LAST:event_bookIdEditTextActionPerformed

    private void bookNameEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookNameEditTextActionPerformed
        bookName = bookNameEditText.getText().toUpperCase();
        if (bookName.isEmpty()) {
            showmessage("Book's Name shouldn't be Empty!");
        } else {

            Pattern namePattern = Pattern.compile("^[a-zA-Z ]{4,16}$");
            Matcher nameMatcher = namePattern.matcher(bookName);
            if (!nameMatcher.matches()) {

                showmessage("Book's Name should not cotain any number! ");
                bookNameEditText.requestFocus();

                bookNameEditText.setBackground(Color.red);
                bookNameEditText.setForeground(Color.white);
                bookNameEditText.setText("");
                bookNameEditText.requestFocus();

            } else {
                bookNameEditText.setBackground(Color.WHITE);
                bookNameEditText.setForeground(Color.BLACK);
                authorNameEditText.requestFocus();
            }

        }

    }//GEN-LAST:event_bookNameEditTextActionPerformed

    private void authorNameEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorNameEditTextActionPerformed
        author = authorNameEditText.getText().toUpperCase();
        if (author.isEmpty()) {
            showmessage("Author's Name shouldn't be Empty!");
        } else {

            Pattern namePattern = Pattern.compile("^[a-zA-Z ]{4,16}$");
            Matcher nameMatcher = namePattern.matcher(author);
            if (!nameMatcher.matches()) {

                showmessage("Author's Name should not cotain any number! ");
                authorNameEditText.requestFocus();

                authorNameEditText.setBackground(Color.red);
                authorNameEditText.setForeground(Color.white);
                authorNameEditText.setText("");
                authorNameEditText.requestFocus();

            } else {
                authorNameEditText.setBackground(Color.white);
                authorNameEditText.setForeground(Color.BLACK);
                publisherNameEditText.requestFocus();
            }

        }

    }//GEN-LAST:event_authorNameEditTextActionPerformed

    private void publisherNameEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publisherNameEditTextActionPerformed
        publisher = publisherNameEditText.getText().toUpperCase();
        if (publisher.isEmpty()) {
            showmessage("Publisher's Name shouldn't be Empty!");
        } else {

            Pattern namePattern = Pattern.compile("^[a-zA-Z ]{4,16}$");
            Matcher nameMatcher = namePattern.matcher(publisher);
            if (!nameMatcher.matches()) {

                showmessage("Publisher's Name should not cotain any number! ");
                publisherNameEditText.requestFocus();

                publisherNameEditText.setBackground(Color.red);
                publisherNameEditText.setForeground(Color.white);
                publisherNameEditText.setText("");
                publisherNameEditText.requestFocus();

            } else {
                publisherNameEditText.setBackground(Color.white);
                publisherNameEditText.setForeground(Color.BLACK);
                supplierNameEditText.requestFocus();
            }

        }


    }//GEN-LAST:event_publisherNameEditTextActionPerformed

    private void supplierNameEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierNameEditTextActionPerformed
        supplier = supplierNameEditText.getText().toUpperCase();
        if (supplier.isEmpty()) {
            showmessage("Supplier's Name shouldn't be Empty!");
        } else {

            Pattern namePattern = Pattern.compile("^[a-zA-Z ]{4,16}$");
            Matcher nameMatcher = namePattern.matcher(supplier);
            if (!nameMatcher.matches()) {

                showmessage("Supplier's Name should not cotain any number! ");
                supplierNameEditText.requestFocus();

                supplierNameEditText.setBackground(Color.red);
                supplierNameEditText.setForeground(Color.white);
                supplierNameEditText.setText("");
                supplierNameEditText.requestFocus();

            } else {
                supplierNameEditText.setBackground(Color.white);
                supplierNameEditText.setForeground(Color.BLACK);
                bookPriceEditText.requestFocus();
            }

        }

    }//GEN-LAST:event_supplierNameEditTextActionPerformed

    private void bookPriceEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookPriceEditTextActionPerformed

        if (String.valueOf(bookPriceEditText.getText()).isEmpty()) {
            showmessage("Book's Price shouldn't be Empty!");
        } else {

            Pattern p = Pattern.compile("^\\d+$");
            Matcher m = p.matcher(bookPriceEditText.getText());
            if (!m.matches()) {

                showmessage("Book Price can only be Numbers.");
                bookPriceEditText.requestFocus();

                bookPriceEditText.setBackground(Color.red);
                bookPriceEditText.setForeground(Color.white);
                bookPriceEditText.setText("");
                bookPriceEditText.requestFocus();
            } else {
                cost = Double.valueOf(bookPriceEditText.getText());
                bookPriceEditText.setBackground(Color.white);
                bookPriceEditText.setForeground(Color.BLACK);
                BillNumberEditText.requestFocus();
            }
        }

    }//GEN-LAST:event_bookPriceEditTextActionPerformed

    private void NoOfPagesEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoOfPagesEditTextActionPerformed

        String noOfPages = NoOfPagesEditText.getText();
        if (noOfPages.isEmpty()) {
            showmessage("No of pages shouldn't be Empty!");
        } else {

            Pattern p = Pattern.compile("^\\d+$");
            Matcher m = p.matcher(NoOfPagesEditText.getText());
            if (!m.matches()) {

                showmessage("No of pages can only be Numbers.");
                NoOfPagesEditText.setBackground(Color.red);
                NoOfPagesEditText.setForeground(Color.white);
                NoOfPagesEditText.setText("");
                NoOfPagesEditText.requestFocus();
            } else {
                if (noOfPages.length() > 4) {
                    showmessage("No of pages can't be more then 4 digits");
                    NoOfPagesEditText.requestFocus();
                } else {
                    pages = Integer.valueOf(NoOfPagesEditText.getText());
                    NoOfPagesEditText.setBackground(Color.white);
                    NoOfPagesEditText.setForeground(Color.BLACK);
                    RemarkEditText.requestFocus();
                }
            }
        }

    }//GEN-LAST:event_NoOfPagesEditTextActionPerformed

    private void ResetFieldsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetFieldsBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ResetFieldsBtnActionPerformed

    private void DeleteBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBookBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DeleteBookBtnActionPerformed

    private void AddBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBookBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddBookBtnActionPerformed

    private void UpdateBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBookBtnActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_UpdateBookBtnActionPerformed

    private void AddBookBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddBookBtnMouseClicked
        
        getData();
        try {

            sql = "Select * from `books` where `bookId` Like '" + bookId + "';";
            pst = conn.prepareStatement(sql);
            rst = pst.executeQuery();
            if (rst.next()) {
                showmessage("Book with same Acc NO. Already Exists...");
            } else {
                sql = "INSERT INTO `books` (`bookId`, `bookName`, `authorName`, `publisherName`, `supplierName`, `costOfBook`, `billNumber`, `remark`, `subjectOfBook`, `edition`, `publishYear`, `pages`, `dateOfSupply`) "
                        + " values(?,?,?,?,?,?,?,?,?,?,?,?,?);";
                pst = conn.prepareStatement(sql);
                pst.setString(1, bookId);
                pst.setString(2, bookName);
                pst.setString(3, author);
                pst.setString(4, publisher);
                pst.setString(5, supplier);
                pst.setDouble(6, cost);
                pst.setString(7, billNo);
                pst.setString(8, remark);
                println(remark);
                pst.setString(9, subjectOfBook);
                pst.setString(10, edition);
                pst.setInt(11, publishYear);
                pst.setInt(12, pages);
                dateOfSupply = supplyDatePicker.getDate();
                java.sql.Date sqlDate = new java.sql.Date(dateOfSupply.getTime());
                pst.setDate(13, sqlDate);
                int updateRowCount = pst.executeUpdate();
                if (updateRowCount > 0) {
                    // sending user to control panel
                    showmessage("book data inserted sucessfully!");
                } else {

                    showmessage("Oops! book insertion Failure");
                }
            } // upper else block
            setBookDetailTable();

        } catch (SQLException ex) {
            ex.printStackTrace();
        }


    }//GEN-LAST:event_AddBookBtnMouseClicked

    private void ManageBookLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ManageBookLabelMouseClicked

        setBookDetailTable();
    }//GEN-LAST:event_ManageBookLabelMouseClicked

    private void subjectOfBookEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectOfBookEditTextActionPerformed
        subjectOfBook = subjectOfBookEditText.getText().toUpperCase();
        if (subjectOfBook.isEmpty()) {
            showmessage("Subject shouldn't be Empty!");
        } else {

            Pattern namePattern = Pattern.compile("^[a-zA-Z ]{4,16}$");
            Matcher nameMatcher = namePattern.matcher(subjectOfBook);
            if (!nameMatcher.matches()) {

                showmessage("Subject should not cotain any number! ");
                subjectOfBookEditText.requestFocus();

                subjectOfBookEditText.setBackground(Color.red);
                subjectOfBookEditText.setForeground(Color.white);
                subjectOfBookEditText.setText("");
                subjectOfBookEditText.requestFocus();

            } else {
                subjectOfBookEditText.setBackground(Color.white);
                subjectOfBookEditText.setForeground(Color.BLACK);
                bookEditionEditText.requestFocus();
            }

        }

    }//GEN-LAST:event_subjectOfBookEditTextActionPerformed

    private void bookEditionEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookEditionEditTextActionPerformed
        edition = bookEditionEditText.getText();
        if (edition.isEmpty()) {
            showmessage("Edition shouldn't be Empty!");
        } else {

            Pattern namePattern = Pattern.compile("^[a-zA-Z ]{4,16}$");
            Matcher nameMatcher = namePattern.matcher(edition);
            if (!nameMatcher.matches()) {

                showmessage("Edition should not cotain any number! ");
                bookEditionEditText.requestFocus();

                bookEditionEditText.setBackground(Color.red);
                bookEditionEditText.setForeground(Color.white);
                bookEditionEditText.setText("");
                bookEditionEditText.requestFocus();

            } else {
                bookEditionEditText.setBackground(Color.white);
                bookEditionEditText.setForeground(Color.BLACK);
                publishYearEditText.requestFocus();
            }

        }

    }//GEN-LAST:event_bookEditionEditTextActionPerformed

    private void publishYearEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publishYearEditTextActionPerformed

        String localPublishYear = publishYearEditText.getText();
        int length = localPublishYear.length();
//        System.out.print(length);
        if (localPublishYear.isEmpty()) {
            showmessage("Publishing year shouldn't be Empty!");

        }
        Pattern p = Pattern.compile("^\\d+$");
        Matcher m = p.matcher(publishYearEditText.getText());
        if (!m.matches()) {

            showmessage("Publishing year can be only in Numbers.");
            publishYearEditText.setBackground(Color.red);
            publishYearEditText.setForeground(Color.white);
            publishYearEditText.setText("");
            publishYearEditText.requestFocus();
        } else {
            if (length > 4 || length < 4) {
                showmessage("Publishing year length should be 4 digit. ");
            } else {

                int publishyearIntValue = Integer.parseInt(localPublishYear);
                Date date = new Date();
                Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("India"));
                cal.setTime(date);
                int year = cal.get(Calendar.YEAR);
                if (publishyearIntValue > year || publishyearIntValue < 1950) {

                    showmessage("Can't be less then 1950 or more than " + year);
                    publishYearEditText.requestFocus();
                } else {

                    publishYear = Integer.valueOf(publishYearEditText.getText());
                    publishYearEditText.setBackground(Color.white);
                    publishYearEditText.setForeground(Color.BLACK);
                    NoOfPagesEditText.requestFocus();
                }
            }
        }

    }//GEN-LAST:event_publishYearEditTextActionPerformed

    private void BillNumberEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BillNumberEditTextActionPerformed
        billNo = BillNumberEditText.getText();

        if (billNo.isEmpty()) {
            showmessage("Publishing year shouldn't be Empty!");
        } 
        else {

            Pattern p = Pattern.compile("^\\d+$");
            Matcher m = p.matcher(BillNumberEditText.getText());
            if (!m.matches()) {

                showmessage("Bill Number can only be Numbers.");
                BillNumberEditText.setBackground(Color.red);
                BillNumberEditText.setForeground(Color.white);
                BillNumberEditText.setText("");
                BillNumberEditText.requestFocus();
            } else {
                BillNumberEditText.setBackground(Color.white);
                BillNumberEditText.setForeground(Color.BLACK);
                supplyDatePicker.requestFocus();
            }
        }


    }//GEN-LAST:event_BillNumberEditTextActionPerformed

    private void RemarkEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemarkEditTextActionPerformed
        remark = RemarkEditText.getText().toUpperCase();
        println(remark);
        if (remark.isEmpty()) {
            showmessage("Edition shouldn't be Empty!");
        } else {

            Pattern namePattern = Pattern.compile("^[a-zA-Z ]{3,16}$");
            Matcher nameMatcher = namePattern.matcher(remark);
            if (!nameMatcher.matches()) {

                showmessage("Edition should not cotain any number! ");
                RemarkEditText.requestFocus();

                RemarkEditText.setBackground(Color.red);
                RemarkEditText.setForeground(Color.white);
                RemarkEditText.setText("");
                RemarkEditText.requestFocus();

            } else {
                RemarkEditText.setBackground(Color.white);
                RemarkEditText.setForeground(Color.BLACK);

            }

        }

    }//GEN-LAST:event_RemarkEditTextActionPerformed

    private void UpdateBookBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdateBookBtnMouseClicked

            try {
                 getData();
                sql = "UPDATE  `books`  set bookName = ?, authorName = ?, publisherName =?, supplierName =?, costOfBook = ?, billNumber = ?, remark = ?, subjectOfBook = ?,"
                        + " edition =?, publishYear = ?, pages = ?, dateOfSupply = ?  where bookId = ? ";
                pst = conn.prepareStatement(sql);

                pst.setString(1, bookName);
                pst.setString(2, author);
                pst.setString(3, publisher);
                pst.setString(4, supplier);
                pst.setDouble(5, cost);
                pst.setString(6, billNo);
                pst.setString(7, remark);
                pst.setString(8, subjectOfBook);
                pst.setString(9, edition);
                pst.setInt(10, publishYear);
                pst.setInt(11, pages);
                java.sql.Date sqlDate = new java.sql.Date(dateOfSupply.getTime());
                pst.setDate(12, sqlDate);
                pst.setString(13, bookId);
                int updateRowCount = pst.executeUpdate();
                if (updateRowCount > 0) {
                    // sending user to control panel
                    showmessage("book data Updated sucessfully!");
                } else {

                    showmessage("Once Created , Book's id can't be updated");
                }
                // upper else block
                setBookDetailTable();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
     

    }//GEN-LAST:event_UpdateBookBtnMouseClicked

    private void ResetFieldsBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResetFieldsBtnMouseClicked

        bookIdEditText.setText("");
        bookNameEditText.setText("");
        authorNameEditText.setText("");
        publisherNameEditText.setText("");
        supplierNameEditText.setText("");
        bookPriceEditText.setText("");
        BillNumberEditText.setText("");
        RemarkEditText.setText("");
        subjectOfBookEditText.setText("");
        bookEditionEditText.setText("");
        publishYearEditText.setText("");
        NoOfPagesEditText.setText("");

    }//GEN-LAST:event_ResetFieldsBtnMouseClicked

    private void DeleteBookBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteBookBtnMouseClicked

        try {

            bookId = bookIdEditText.getText();

//            checking if book is issued to anybody, if it is then book shouldn't be deleted.
            sql = "select issuedToStudId from `books` where bookId Like '" + bookId + "';";
            pst = conn.prepareStatement(sql);
            rst = pst.executeQuery();
            if (rst.next()) {

                isIssued = rst.getString("issuedToStudId");
                // if book is already allocated to any student 
                if (!isIssued.contains("None")) {
                    pst = conn.prepareStatement("Select * from `students` where `studentid` = ?;");
                    pst.setString(1, isIssued);
                    rst = pst.executeQuery();
                    while (rst.next()) {
                        resultNoteLabel.setText(" Can't Delete! Book Allocated to " + rst.getString("studentName"));
                        resultNoteLabel.setForeground(Color.red);
                    }
                } else {
                    /* JOptionPane user input  */
                    bookName = bookNameEditText.getText().toUpperCase();
                    
                    var yesOrNo = JOptionPane.showConfirmDialog(ManageBooks.this, "Sure! Want to Delete Book? " + bookName);
                    if (yesOrNo == 0) {
                        sql = "Delete  from `books` where bookId Like '" + bookId + "';";
                        pst = conn.prepareStatement(sql);
                        int updateRowCount = pst.executeUpdate();
                        if (updateRowCount > 0) {
                            showmessage("Book Deleted from DATABASE");
                        } else {

                            showmessage("ERROR! in Deleting Book");
                        }
                        setBookDetailTable();
                    }
                }
            } else {
                resultNoteLabel.setForeground(Color.red);
                resultNoteLabel.setText("NO SUCH BOOK FOUND IN DATABASE");
            }

        } catch (SQLException ex) {

            ex.printStackTrace();
        }


    }//GEN-LAST:event_DeleteBookBtnMouseClicked

    private void dataTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataTableMouseClicked

        int rowNo = dataTable.getSelectedRow();
        TableModel model = dataTable.getModel();

        bookIdEditText.setText(model.getValueAt(rowNo, 0).toString());
        bookNameEditText.setText(model.getValueAt(rowNo, 1).toString());
        authorNameEditText.setText(model.getValueAt(rowNo, 2).toString());
        publisherNameEditText.setText(model.getValueAt(rowNo, 3).toString());
        supplierNameEditText.setText(model.getValueAt(rowNo, 4).toString());
        subjectOfBookEditText.setText(model.getValueAt(rowNo, 5).toString());

        try {
            rst = pst.executeQuery("SELECT * FROM `books` where bookId = '" + model.getValueAt(rowNo, 0).toString() + "';");
            rst.next();
            cost = rst.getDouble("costOfBook");
            billNo = rst.getString("billNumber");
            remark = rst.getString("remark");
            edition = rst.getString("edition");
            publishYear = rst.getInt("publishYear");
            pages = rst.getInt("pages");
            dateOfSupply = rst.getDate("dateOfSupply");

        } catch (SQLException ex) {
            Logger.getLogger(ManageBooks.class.getName()).log(Level.SEVERE, null, ex);
        }

        bookPriceEditText.setText(cost.toString());
        BillNumberEditText.setText(billNo);
        RemarkEditText.setText(remark);
        bookEditionEditText.setText(edition);
        publishYearEditText.setText(publishYear.toString());
        NoOfPagesEditText.setText(pages.toString());
        supplyDatePicker.setDate(dateOfSupply);
    }//GEN-LAST:event_dataTableMouseClicked

    private void bookIdEditTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bookIdEditTextFocusLost


    }//GEN-LAST:event_bookIdEditTextFocusLost

    private void bookNameEditTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bookNameEditTextFocusLost
        // TODO add your handling code here:

    }//GEN-LAST:event_bookNameEditTextFocusLost

    private void supplyDatePickerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_supplyDatePickerPropertyChange
        // TODO add your handling code here:

    }//GEN-LAST:event_supplyDatePickerPropertyChange

    private void supplyDatePickerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_supplyDatePickerFocusGained
        // TODO add your handling code here:
        showmessage("SELECT SUPPLY DATE FROM PICKER");
    }//GEN-LAST:event_supplyDatePickerFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ManageBooks().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBookBtn;
    private app.bolivia.swing.JCTextField BillNumberEditText;
    private javax.swing.JButton DeleteBookBtn;
    private javax.swing.JLabel HomeBtn;
    private javax.swing.JLabel ManageBookLabel;
    private app.bolivia.swing.JCTextField NoOfPagesEditText;
    private app.bolivia.swing.JCTextField RemarkEditText;
    private javax.swing.JButton ResetFieldsBtn;
    private javax.swing.JButton UpdateBookBtn;
    private rojerusan.RSLabelImage accessionNoIcon;
    private app.bolivia.swing.JCTextField authorNameEditText;
    private rojerusan.RSLabelImage authorNameIcon;
    private rojerusan.RSLabelImage billNumberIcon;
    private app.bolivia.swing.JCTextField bookEditionEditText;
    private app.bolivia.swing.JCTextField bookIdEditText;
    private app.bolivia.swing.JCTextField bookNameEditText;
    private rojerusan.RSLabelImage bookNameIcon;
    private app.bolivia.swing.JCTextField bookPriceEditText;
    private rojerusan.RSLabelImage costIcon;
    private rojeru_san.complementos.RSTableMetro dataTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JLabel miscleanousIcon;
    private app.bolivia.swing.JCTextField publishYearEditText;
    private app.bolivia.swing.JCTextField publisherNameEditText;
    private rojerusan.RSLabelImage publisherNameIcon;
    private rojerusan.RSLabelImage remarkIcon;
    private javax.swing.JLabel resultNoteLabel;
    private javax.swing.JPanel rightPanel;
    private app.bolivia.swing.JCTextField subjectOfBookEditText;
    private app.bolivia.swing.JCTextField supplierNameEditText;
    private rojerusan.RSLabelImage supplierNameIcon;
    private com.toedter.calendar.JDateChooser supplyDatePicker;
    private rojerusan.RSLabelImage usernameicon12;
    // End of variables declaration//GEN-END:variables
}
